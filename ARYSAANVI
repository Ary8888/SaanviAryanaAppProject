import tensorflow as tf
import pandas as pd
import numpy as np
import barcode
from barcode.writer import ImageWriter
from flask import Flask, request, jsonify
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

# Load dataset
dataset = pd.read_csv("pink_tax_dataset.csv")
texts = dataset["description"].values
labels = dataset["pink_tax"].values

# Preprocess data
tokenizer = Tokenizer(num_words=5000, oov_token="<OOV>")
tokenizer.fit_on_texts(texts)
sequences = tokenizer.texts_to_sequences(texts)
padded_sequences = pad_sequences(sequences, maxlen=100, padding='post', truncating='post')

# Build NLP model
model = Sequential([
    Embedding(input_dim=5000, output_dim=64, input_length=100),
    LSTM(64, return_sequences=True),
    LSTM(32),
    Dense(32, activation='relu'),
    Dense(1, activation='sigmoid')
])

model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
model.fit(padded_sequences, labels, epochs=5, batch_size=16, validation_split=0.2)

# Save model
model.save("pink_tax_model.h5")

# API Setup
app = Flask(__name__)

@app.route('/predict', methods=['POST'])
def predict():
    data = request.json
    text = data.get("text")
    seq = tokenizer.texts_to_sequences([text])
    padded = pad_sequences(seq, maxlen=100, padding='post', truncating='post')
    prediction = model.predict(padded)
    result = "Likely has pink tax" if prediction[0][0] > 0.5 else "No pink tax detected"
    return jsonify({"prediction": result})

@app.route('/scan_barcode', methods=['POST'])
def scan_barcode():
    data = request.json
    barcode_number = data.get("barcode")
    item_info = dataset[dataset['barcode'] == barcode_number]
    if not item_info.empty:
        result = "Likely has pink tax" if item_info['pink_tax'].values[0] == 1 else "No pink tax detected"
        return jsonify({"item": item_info['description'].values[0], "prediction": result})
    return jsonify({"error": "Item not found in dataset"})

if __name__ == '__main__':
    app.run(debug=True)
